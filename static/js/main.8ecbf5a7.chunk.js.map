{"version":3,"sources":["components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["useState","React","InputField","styled","input","Button","span","TodoItemWrapper","div","TodoContent","prop","isDone","TodoButtonWrapper","TodoUpdateWrapper","TodoUpdate","todo","handleUpdateTodo","value","setValue","type","placeholder","content","onChange","e","target","onClick","id","TodoItem","handleTogglerIsDone","handleTogglerUpdateTodo","handleDeleteTodo","isUpdate","data-todo-id","AppWrapper","TitleH1","TodoBox","TodoAddWrapper","TodoFilterWrapper","DivideLine","TodoAdd","handleAddTodo","TodoFilter","filterList","todoId","App","todos","setTodos","status","setStatus","map","filter","FilterMap","All","Done","NotDone","Object","keys","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ecbf5a7.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport \"normalize.css\";\nimport React from \"react\";\n\nconst { useState } = React;\nconst InputField = styled.input`\n  width: 88%;\n  border: 0;\n  font-size: 16px;\n  background: #f0f0f0;\n\n  &:focus {\n    border: 0;\n  }\n`;\nconst Button = styled.span`\n  font-size: 14px;\n  padding: 3px 5px;\n  border: 1px solid #6c6c6c;\n  border-radius: 5px;\n  cursor: pointer;\n  & + & {\n    margin-left: 5px;\n  }\n`;\n\nconst TodoItemWrapper = styled.div`\n  width: 95%;\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 0;\n  margin: 0 auto;\n  border-bottom: 1px solid #e0e0e0;\n`;\nconst TodoContent = styled.div`\n  font-size: 16px;\n  ${(prop) =>\n    prop.isDone &&\n    `\n    color: \t#BEBEBE;\n    text-decoration: line-through;\n  `}\n`;\nconst TodoButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nconst TodoUpdateWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst TodoUpdate = ({ todo, handleUpdateTodo }) => {\n  const [value, setValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <TodoUpdateWrapper>\n      <InputField\n        type=\"text\"\n        placeholder={todo.content}\n        value={value}\n        onChange={handleInputChange}\n      />\n      <Button\n        onClick={() => {\n          handleUpdateTodo(todo.id, value);\n          setValue(\"\");\n        }}\n      >\n        確認\n      </Button>\n    </TodoUpdateWrapper>\n  );\n};\n\nconst TodoItem = ({\n  todo,\n  handleTogglerIsDone,\n  handleTogglerUpdateTodo,\n  handleUpdateTodo,\n  handleDeleteTodo,\n}) => {\n  const handleTogglerClick = () => {\n    handleTogglerIsDone(todo.id);\n  };\n  const handleUpdateClick = () => {\n    handleTogglerUpdateTodo(todo.id);\n  };\n  const handleDeleteClick = () => {\n    handleDeleteTodo(todo.id);\n  };\n\n  return (\n    <div>\n      {todo.isUpdate && (\n        <TodoUpdate todo={todo} handleUpdateTodo={handleUpdateTodo} />\n      )}\n      {!todo.isUpdate && (\n        <TodoItemWrapper data-todo-id={todo.id}>\n          <TodoContent isDone={todo.isDone}>{todo.content}</TodoContent>\n          <TodoButtonWrapper>\n            <Button onClick={handleTogglerClick}>\n              {todo.isDone ? \"已完成\" : \"未完成\"}\n            </Button>\n            <Button onClick={handleUpdateClick}>編輯</Button>\n            <Button onClick={handleDeleteClick}>刪除</Button>\n          </TodoButtonWrapper>\n        </TodoItemWrapper>\n      )}\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import \"./App.css\";\nimport \"normalize.css\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./components/TodoItem\";\nimport React from \"react\";\n\nconst { useState } = React;\n\nconst AppWrapper = styled.div`\n  background: #f0f0f0;\n  min-height: 700px;\n`;\n\nconst TitleH1 = styled.div`\n  font-size: 4em;\n  font-weight: bold;\n  text-align: center;\n  color: palevioletred;\n  padding: 20px 0;\n`;\n\nconst TodoBox = styled.div`\n  max-width: 500px;\n  border: 2px solid #6c6c6c;\n  border-radius: 10px;\n  margin: 0 auto;\n`;\nconst TodoAddWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 10px 0;\n`;\nconst InputField = styled.input`\n  width: 88%;\n  border: 0;\n  font-size: 16px;\n  background: #f0f0f0;\n\n  &:focus {\n    border: 0;\n  }\n`;\n\nconst TodoFilterWrapper = styled.div`\n  text-align: center;\n  margin: 8px auto;\n`;\n\nconst DivideLine = styled.div`\n  content: \"\";\n  width: 95%;\n  border-bottom: 1px solid #6c6c6c;\n  margin: 5px auto;\n`;\nconst Button = styled.span`\n  font-size: 14px;\n  padding: 3px 5px;\n  border: 1px solid #6c6c6c;\n  border-radius: 5px;\n  cursor: pointer;\n  & + & {\n    margin-left: 5px;\n  }\n`;\n\nconst TodoAdd = ({ handleAddTodo }) => {\n  const [value, setValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <TodoAddWrapper>\n      <InputField\n        type=\"text\"\n        placeholder=\"新增 todo\"\n        value={value}\n        onChange={handleInputChange}\n      />\n      <Button\n        onClick={() => {\n          handleAddTodo(value);\n          setValue(\"\");\n        }}\n      >\n        新增\n      </Button>\n    </TodoAddWrapper>\n  );\n};\n\nconst TodoFilter = ({ filterList }) => {\n  return <TodoFilterWrapper>{filterList}</TodoFilterWrapper>;\n};\n\nlet todoId = 1;\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"All\");\n\n  const handleAddTodo = (value) => {\n    setTodos([\n      {\n        id: todoId,\n        content: value,\n        isDone: false,\n        isUpdate: false,\n      },\n      ...todos,\n    ]);\n    todoId++;\n  };\n\n  const handleTogglerIsDone = (id) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id !== id) return todo;\n        return { ...todo, isDone: !todo.isDone };\n      })\n    );\n  };\n\n  const handleTogglerUpdateTodo = (id) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id !== id) return todo;\n        return { ...todo, isUpdate: !todo.isUpdate };\n      })\n    );\n  };\n  const handleUpdateTodo = (id, value) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id !== id) return todo;\n        return { ...todo, content: value, isUpdate: false };\n      })\n    );\n  };\n\n  const handleDeleteTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const FilterMap = {\n    All: () => true,\n    Done: (todo) => todo.isDone,\n    NotDone: (todo) => !todo.isDone,\n  };\n  const FilterName = Object.keys(FilterMap);\n  const filterList = FilterName.map((name) => (\n    <Button key={name} name={name} onClick={() => setStatus(name)}>\n      {name}\n    </Button>\n  ));\n\n  return (\n    <AppWrapper>\n      <TitleH1>Todo List</TitleH1>\n      <TodoBox>\n        <TodoAdd handleAddTodo={handleAddTodo} />\n        <DivideLine />\n        {todos.filter(FilterMap[status]).map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            handleTogglerIsDone={handleTogglerIsDone}\n            handleTogglerUpdateTodo={handleTogglerUpdateTodo}\n            handleUpdateTodo={handleUpdateTodo}\n            handleDeleteTodo={handleDeleteTodo}\n          />\n        ))}\n        <TodoFilter filterList={filterList} />\n      </TodoBox>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}